{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lorep\\\\Desktop\\\\Lezioni\\\\REACT\\\\memory\\\\src\\\\components\\\\Cards.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cards() {\n  _s();\n  const [elements, setElements] = useState([{\n    id: 1,\n    img: \"/img/1.jpg\",\n    stat: \"\"\n  },\n  //ogni card avrà il suo id per verificare l'uguaglianza, la foto \n  {\n    id: 1,\n    img: \"/img/1.jpg\",\n    stat: \"\"\n  },\n  // e lo stat per cambiare la classe della card\n  {\n    id: 2,\n    img: \"/img/2.jpg\",\n    stat: \"\"\n  }, {\n    id: 2,\n    img: \"/img/2.jpg\",\n    stat: \"\"\n  }, {\n    id: 3,\n    img: \"/img/3.jpg\",\n    stat: \"\"\n  }, {\n    id: 3,\n    img: \"/img/3.jpg\",\n    stat: \"\"\n  }, {\n    id: 4,\n    img: \"/img/4.jpg\",\n    stat: \"\"\n  }, {\n    id: 4,\n    img: \"/img/4.jpg\",\n    stat: \"\"\n  }, {\n    id: 5,\n    img: \"/img/5.jpg\",\n    stat: \"\"\n  }, {\n    id: 5,\n    img: \"/img/5.jpg\",\n    stat: \"\"\n  }].sort(() => Math.random() - 0.5)); //le raggruppa a caso ogni volta che la pagina viene ricaricata\n\n  const [prev, setPrev] = useState(-1); //prev sarà usato per identificare la prima card della coppia che stai cercando di indovinare e ha valore base -1 \n\n  function handleClick(id) {\n    //si avvia questa funzione ad ogni click e prende l'id della card clickata\n    if (prev === -1) {\n      // controlla se prev -1, nel caso in cui è vero significa che è la prima della coppia che clickiamo e settiamo la card ad active per girarla  \n      elements[id].stat = \"active\"; //impostiamo a prev l'id della card clickata\n      setElements([...elements]);\n      setPrev(id);\n    } else {\n      //nel caso in cui prev non è -1 vuol dire che ha al suo interno  l'id di un'altra card \n      check(id); //per questo svolgiamo la funzione check per verificare l'uguaglianza fra la card appena clickata e quella precedente\n    }\n  }\n\n  function check(current) {\n    //current è l'id che abbiamo messo come parametro appena abbiamo chiamato il check e faremo le verifiche con l'id dentro current e quello dentro prev\n    if (elements[current].id == elements[prev].id) {\n      //se prev e current sono uguali abbiamo indovinato le card e le impostiamo con la classe correct\n      elements[current].stat = \"correct\";\n      elements[prev].stat = \"correct\";\n      setElements([...elements]);\n      setPrev(-1); //reimpostiamo prev a -1 poichè adesso va indovinata una nuova coppia di cards\n    } else {\n      elements[current].stat = \"wrong\"; //se prev e current non sono uguali abbiamo sbagliato le card e le impostiamo con la classe wrong\n      elements[prev].stat = \"wrong\";\n      setElements([...elements]);\n      setTimeout(() => {\n        //queste cards rimmarranno a wrong per 1s per dare un feedback all'utente, poi verrano resettate e rigirate\n        elements[current].stat = \"\";\n        elements[prev].stat = \"\";\n        setElements([...elements]);\n        setPrev(-1); //reimpostiamo prev a -1 poichè adesso va indovinata una nuova coppia di cards\n      }, 1000);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: elements.map((element, index) => /*#__PURE__*/_jsxDEV(Card, {\n      element: element,\n      id: index,\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(Cards, \"0wPrVZXQRT70MNQcGj2KM6UMpTs=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["useState","Card","jsxDEV","_jsxDEV","Cards","_s","elements","setElements","id","img","stat","sort","Math","random","prev","setPrev","handleClick","check","current","setTimeout","className","children","map","element","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/lorep/Desktop/Lezioni/REACT/memory/src/components/Cards.js"],"sourcesContent":["import { useState } from \"react\"\r\nimport Card from \"./Card\"\r\n\r\nfunction Cards(){\r\n    const [elements, setElements] = useState([\r\n    { id: 1, img: \"/img/1.jpg\" , stat: \"\"},   //ogni card avrà il suo id per verificare l'uguaglianza, la foto \r\n    { id: 1, img: \"/img/1.jpg\" , stat: \"\"},   // e lo stat per cambiare la classe della card\r\n    { id: 2, img: \"/img/2.jpg\" , stat: \"\"},\r\n    { id: 2, img: \"/img/2.jpg\" , stat: \"\"},\r\n    { id: 3, img: \"/img/3.jpg\" , stat: \"\"},\r\n    { id: 3, img: \"/img/3.jpg\" , stat: \"\"},\r\n    { id: 4, img: \"/img/4.jpg\" , stat: \"\"},\r\n    { id: 4, img: \"/img/4.jpg\" , stat: \"\"},\r\n    { id: 5, img: \"/img/5.jpg\" , stat: \"\"},\r\n    { id: 5, img: \"/img/5.jpg\" , stat: \"\"},\r\n    ].sort(() => Math.random() - 0.5)) //le raggruppa a caso ogni volta che la pagina viene ricaricata\r\n\r\n    const [prev, setPrev] = useState(-1) //prev sarà usato per identificare la prima card della coppia che stai cercando di indovinare e ha valore base -1 \r\n\r\n    function handleClick(id){ //si avvia questa funzione ad ogni click e prende l'id della card clickata\r\n        if(prev === -1){    // controlla se prev -1, nel caso in cui è vero significa che è la prima della coppia che clickiamo e settiamo la card ad active per girarla  \r\n            elements[id].stat = \"active\" //impostiamo a prev l'id della card clickata\r\n            setElements([...elements])\r\n            setPrev(id)\r\n        }else{         //nel caso in cui prev non è -1 vuol dire che ha al suo interno  l'id di un'altra card \r\n            check(id) //per questo svolgiamo la funzione check per verificare l'uguaglianza fra la card appena clickata e quella precedente\r\n        }\r\n\r\n    }\r\n\r\n    function check(current){  //current è l'id che abbiamo messo come parametro appena abbiamo chiamato il check e faremo le verifiche con l'id dentro current e quello dentro prev\r\n        if(elements[current].id == elements[prev].id){ //se prev e current sono uguali abbiamo indovinato le card e le impostiamo con la classe correct\r\n            elements[current].stat = \"correct\"\r\n            elements[prev].stat = \"correct\"\r\n            setElements([... elements])\r\n            setPrev(-1) //reimpostiamo prev a -1 poichè adesso va indovinata una nuova coppia di cards\r\n        }else{\r\n            elements[current].stat = \"wrong\" //se prev e current non sono uguali abbiamo sbagliato le card e le impostiamo con la classe wrong\r\n            elements[prev].stat = \"wrong\"\r\n            setElements([... elements])\r\n            setTimeout(() => {   //queste cards rimmarranno a wrong per 1s per dare un feedback all'utente, poi verrano resettate e rigirate\r\n                elements[current].stat =\"\"\r\n                elements[prev].stat =\"\"\r\n                setElements([... elements])\r\n                setPrev(-1) //reimpostiamo prev a -1 poichè adesso va indovinata una nuova coppia di cards\r\n            }, 1000)\r\n            \r\n        }\r\n    }\r\n\r\n\r\n\r\n    return(\r\n    <div className=\"container\">      \r\n        { elements.map((element, index) => (   \r\n            <Card element={element} id={index} handleClick={handleClick}\r\n            />\r\n\r\n        ))}\r\n     </div>\r\n    )\r\n}\r\n\r\nexport default Cards"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}